v1 - v9

v1: basic

2019.10.27


2019.10.28
v4
lockSupport


v5
1.AQS code
*** AQS.unlock() code
2.threadLocal code

3. 强软弱虚

强 objRef = null 回收

soft 内存不够 回收 (cache: memcache)

weak 只要有gc 就会回收
强引用指向weak ref 只要强引用消失，弱引用就会回收

threadLocal 只要强引用消失，弱引用就会回收
弱引用回收后，key指向null，无法访问 但是value 是强引用，同样导致内存泄漏
所有使用threadLocal，不用了一定要remove

虚引用
管理堆外内存
PhantomRef
写 虚拟机 会用到
(netty)DirectByteBuffer 直接使用物理内存

*** WeakHashMap code

v6
各种容器
Collection
    List, Set, Queue
    (Vector)
Map
    HashMap
    ConcurrentHashMap
    HashTable


2019.10.31
v7
interview a1b2c3

ThreadPool
Executors
ExecutorService
1:32min

2019.11.1

ForkJoinPool
CompletableFuture

2019.11.4
v8
0.14.30min wait
ThreadPoolExecutor

Executors 线程池工厂

singleThreadPool
单线程池为什么存在
1 生命周期
2 队列

不建议使用默认的线程池：
1 线程名不好
2 队列太长
3 会有默认拒绝策略

cachedThreadPool
1. queue: sychrousBlockQueue
线程最大integer.maxValue
直接执行， 不等待

fixedThreadPool

scheduledThreadPool
queue:delayQueue

ThreadPoolExecutor source code
1.40.0min addWorker source code
所有线程共享一个队列

workStealingPool
ForkJoinPool
每个线程有自己的队列





